[
    {
        "id": "01",
        "question": "reverse an array",
        "questionDescription": "Reverse an array",
        "questionLink": "https://www.geeksforgeeks.org/write-a-program-to-reverse-an-array-or-string/",
        "samples": [
            {
                "input": "{1,2,3,4,5}",
                "output": "{5,4,3,2,1}"
            },
            {
                "input": "{324, 435, 456, 46}",
                "output": "{46, 456, 435, 324}"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_01_ReverseArray.java",
        "solutionLogic": "use two pointers - one at array start and another one at array end, move both towards each other",
        "solutionSteps": [],
        "tags": [
            "2pointer",
            "recursion"
        ],
        "credits": "https://www.geeksforgeeks.org/write-a-program-to-reverse-an-array-or-string/",
        "time_complexity": "O(n)",
        "space_complexity": ""
    },
    {
        "id": "02",
        "question": "Min and max element in an array",
        "questionDescription": "Find the minimum and maximum number in an array (with as less comparisons as possible)",
        "questionLink": "https://www.geeksforgeeks.org/maximum-and-minimum-in-an-array/",
        "samples": [
            {
                "input": "1,2,3,4,5",
                "output": "min: 1, max : 5"
            },
            {
                "input": "324,435,456,46",
                "output": "min: 46, max: 456"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_02_MinMaxInArray.java",
        "solutionLogic": "",
        "solutionSteps": [
            "step1: base condition-1 : return only element if array size is 1",
            "step2 : base condition 2: compare only existing 2 elements in array and return min and max",
            "step3: split array into two and recursively call findMinMax method"
        ],
        "tags": [
            "recursion",
            "divideArray",
            "tournamentMethod"
        ],
        "credits": "https://www.geeksforgeeks.org/maximum-and-minimum-in-an-array/",
        "time_complexity": "O(n)",
        "space_complexity": ""
    },
    {
        "id": "03",
        "question": "Kth largest element in array",
        "questionDescription": "Find kth largest element in an array of size N",
        "questionLink": "https://practice.geeksforgeeks.org/problems/kth-smallest-element5635/1",
        "samples": [
            {
                "input": "input = {7 10 4 20 15}, k = 4",
                "output": "15",
                "explaination": "15 is 4th largest element in array"
            },
            {
                "input": "input = {7 10 4 3 20 15}, k = 3",
                "output": "7",
                "explaination": "7 is 3rd largest element in array"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_03_FindKthLargestElementInArray.java",
        "solutionLogic": "",
        "solutionSteps": [
            "step1 : sort the array desending order using any nlogn algo like quick/merge sort",
            "step2 : return the kth element in array",
            "step3: Alternatively, Min/Max Heap can also be used"
        ],
        "tags": [
            "sortArray"
        ],
        "credits": "https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/",
        "time_complexity": "O(N Log N) ",
        "space_complexity": ""
    },
    {
        "id": "04",
        "question": "Sort an array of 0s, 1s and 2s",
        "questionDescription": "Sort an array of 0s, 1s and 2s",
        "questionLink": "https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/",
        "samples": [
            {
                "input": "{0, 2, 1, 2, 0}",
                "output": "[0, 0, 1, 2, 2]"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_04_Sort012.java",
        "solutionLogic": "",
        "solutionSteps": [
            "step1 : keep 3 pointers : 0, 1, 2",
            "step2 : while mid <= high : case 0 - swap low and mid, low++ mid ++, case 1 : mid++, case 2: swap mid and high, high --"
        ],
        "tags": [
            "3pointer",
            "dutchNationalFlag",
            "arraySprting"
        ],
        "credits": "https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/",
        "time_complexity": "O(n)",
        "space_complexity": "O(1)"
    },
    {
        "id": "05",
        "question": "Seggregate negative and positive numbers in array",
        "questionDescription": "Seggregate negative numbers (towards left )and positive numbers (towards right) in array",
        "questionLink": "https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/",
        "samples": [
            {
                "input": "{ -1, 2, -3, 4, 5, 6, -7, 8, 9 }",
                "output": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_05_SeggregatePositiveNegative.java",
        "solutionLogic": "",
        "solutionSteps": [
            "step1 : while traversing array, if arr[i] < 0, swap arr[i] and arr[j] and j++"
        ],
        "tags": [
            "linearTraversal"
        ],
        "credits": "https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/",
        "time_complexity": "O(n)",
        "space_complexity": "O(1)"
    },
    {
        "id": "06",
        "question": "Union of two unsorted arrays",
        "questionDescription": "Given two arrays a[] and b[] of size n and m respectively. The task is to find union between these two arrays and return array length. Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.",
        "questionLink": "https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/",
        "samples": [
            {
                "input": "a1 : { 1 2 3 4 5 }, a2: {1 2 3, 9}",
                "output": "6",
                "explaination": "after union, array = {1, 2, 3, 4, 5, 9} and array length would be 6"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_06_UnionOfTwoUnsortedArrays.java",
        "solutionLogic": "",
        "solutionSteps": [
            "solution-1 : using hashset and hashmap",
            "solution-2 : using array. use array index as hashkey and mark value as presence"
        ],
        "tags": [
            "unsorted",
            "union"
        ],
        "credits": "https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/",
        "time_complexity": "O((n+m)log(n+m))",
        "space_complexity": "O(n+m)"
    },
    {
        "id": "07",
        "question": "Cyclically rotate an array by one ",
        "questionDescription": "Given an array, rotate the array by one position in clock-wise direction.",
        "questionLink": "https://www.geeksforgeeks.org/c-program-cyclically-rotate-array-one/",
        "samples": [
            {
                "input": "{1, 2, 3, 4, 5}",
                "output": "{5 1 2 3 4}"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_07_RotateArrayByOne.java",
        "solutionLogic": "",
        "solutionSteps": [
            "solution-1 : loop through array from last to first and transfer value to next index",
            "solution-2 : two pointer, increment only left pointer"
        ],
        "tags": [
            "2pointer",
            "rotate"
        ],
        "credits": "https://www.geeksforgeeks.org/c-program-cyclically-rotate-array-one/",
        "time_complexity": "O(n)",
        "space_complexity": ""
    },
    {
        "id": "08",
        "question": "Kadane's Algorithm : Largest Sum Contiguous Subarray ",
        "questionDescription": "Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.",
        "questionLink": "https://www.geeksforgeeks.org/c-program-cyclically-rotate-array-one/",
        "samples": [
            {
                "input": "{-2, -3, 4, -1, -2, 1, 5, -3}",
                "output": " [4, -1, -2, 1, 5]"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_08_KadanesAlgo.java",
        "solutionLogic": "",
        "solutionSteps": [
            "step-1 : initialise two variables - one is max sum and one more current sum",
            "step-2 : In a single loop, update values of curSum and maxSum depending upon summation of array numbers until that point."
        ],
        "tags": [
            "Kadane",
            "subArray",
            "dynamicProgramming"
        ],
        "credits": "https://www.geeksforgeeks.org/c-program-cyclically-rotate-array-one/",
        "time_complexity": "O(n)",
        "space_complexity": ""
    },
    {
        "id": "09",
        "question": "Minimize the max diff between heights ",
        "questionDescription": "Given an array arr[] denoting heights of N towers and a positive integer K, you have to modify the height of each tower either by increasing or decreasing them by K only once. After modifying, height should be a non-negative integer. Find out what could be the possible minimum difference of the height of shortest and longest towers after you have modified each tower.",
        "questionLink": "https://www.geeksforgeeks.org/c-program-cyclically-rotate-array-one/",
        "samples": [
            {
                "input": "K = 2, N = 4 Arr[] = {1, 5, 8, 10}",
                "output": "5",
                "explaination": "The array can be modified as  {3, 3, 6, 8}. The difference between the largest and the smallest is 8-3 = 5."
            },
            {
                "input": "K = 3, N = 5 Arr[] = {3, 9, 12, 16, 20}",
                "output": "11",
                "explaination": "The array can be modified as {6, 12, 9, 13, 17}. The difference between the largest and the smallest is 17-6 = 11. "
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_09_MinimizeMaxDiffBwHeights.java",
        "solutionLogic": "We know minimum value when we add k to whole array---> newMin. So we need to find minimum element when we subtract k from whole array so while searching for minimum element {arr[i]-k} we should search from--->[1,arr.length-1] and similarly for maximum element we should search from---> [0,arr.length-2] so that we can check the height difference between all pairs of adjacent elements because adjacent elements will have small height difference as the array is a sorted one.",
        "solutionSteps": [
            "step-1 : newMax = max - k, newMin = min +k, ans = last element - first element in sorted array, take 2 temp variables : tempMax and tempMin",
            "step-2 : loop from 0 to n-1, max is max of (newMax, ith no + k), min will be min(newMin, i'th+1 no + k",
            "step-3 : inside loop, if curMin <=0 , ans = min(ans, curMax-curMin)"
        ],
        "tags": [
            "tower",
            "height"
        ],
        "credits": "https://www.geeksforgeeks.org/c-program-cyclically-rotate-array-one/",
        "time_complexity": "O(N*logN)",
        "space_complexity": "O(N)"
    },
    {
        "id": "10",
        "question": "Minimum number of jumps",
        "questionDescription": "Given an array of N integers arr[] where each element represents the max number of steps that can be made forward from that element. Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element. Note: Return -1 if you can't reach the end of the array",
        "questionLink": "https://practice.geeksforgeeks.org/problems/minimum-number-of-jumps-1587115620/1#",
        "samples": [
            {
                "input": "{1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} ",
                "output": "3",
                "explanaition": "First jump from 1st element to 2nd element with value 3. Now, from here  we jump to 5th element with value 9, and from here we will jump to last."
            },
            {
                "input": "{2, 3, 1, 1, 2, 4, 2 ,0 ,1 ,1}",
                "output": "4",
                "explanaition": "2 to 3, 3 to 2 , 2 to 4, 4 to last"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_10_MinJumpsInArray.java",
        "solutionLogic": "",
        "solutionSteps": [],
        "tags": [
            "array",
            "jump"
        ],
        "credits": "https://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/",
        "time_complexity": "O(n)",
        "space_complexity": ""
    },
    {
        "id": "11",
        "question": "Find duplicate number",
        "questionDescription": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.There is only one repeated number in nums, return this repeated number.You must solve the problem without modifying the array nums and uses only constant extra space.",
        "questionLink": "https://leetcode.com/problems/find-the-duplicate-number/",
        "samples": [
            {
                "input": "[1,3,4,2,2]",
                "output": "2",
                "explanaition": "First jump from 1st element to 2nd element with value 3. Now, from here  we jump to 5th element with value 9, and from here we will jump to last."
            },
            {
                "input": "[3,1,3,4,2]",
                "output": "3",
                "explanaition": "2 to 3, 3 to 2 , 2 to 4, 4 to last"
            },
            {
                "input": "[1,1,2]",
                "output": "1",
                "explanaition": "2 to 3, 3 to 2 , 2 to 4, 4 to last"
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_11_FindDuplicateNumberInArray.java",
        "solutionLogic": "",
        "solutionSteps": [
            "max = arr.length",
            "max number that be there in array = arr.length - 1",
            "total of numbers from 1 to n-1 is (n * (n+1)/2)",
            "keep subtracting total from array numbers until u get negative no or a zero."
        ],
        "tags": [
            "array",
            "jump"
        ],
        "credits": "",
        "time_complexity": "O(n)",
        "space_complexity": ""
    },
    {
        "id": "12",
        "question": "merge two sorted arrays and print the result (without using third array)",
        "questionDescription": "Given two sorted arrays arr1[] of size N and arr2[] of size M. Each array is sorted in non-decreasing order. Merge the two arrays into one sorted array in non-decreasing order without using any extra space.",
        "questionLink": "https://practice.geeksforgeeks.org/problems/merge-two-sorted-arrays5135/1#",
        "samples": [
            {
                "input": "arr1[] = {1, 3, 5, 7}, arr2[] = {0, 2, 6, 8, 9}",
                "output": "0 1 2 3 5 6 7 8 9",
                "explanaition": "First jump from 1st element to 2nd element with value 3. Now, from here  we jump to 5th element with value 9, and from here we will jump to last."
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_12_MergeWithoutExtraSpace.java",
        "solutionLogic": "merge sort logic",
        "solutionSteps": [],
        "tags": [
            "mergeSort"
        ],
        "credits": "",
        "time_complexity": "O(nlogn)",
        "space_complexity": ""
    },
    {
        "id": "13",
        "question": "merge intervals",
        "questionDescription": "Given an array of intervals where intervals[i] = [start(i), end(i)], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "questionLink": "https://leetcode.com/problems/merge-intervals/",
        "samples": [
            {
                "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
                "output": "[[1,6],[8,10],[15,18]]",
                "explanaition": "Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]."
            },
            {
                "input": "intervals = [[1,4],[4,5]]",
                "output": "[[1,5]]",
                "explanaition": "Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]."
            }
        ],
        "solutionLink": "https://raw.githubusercontent.com/suhas1294/love-babbar-450-dsa/main/src/main/java/rishi/atreya/_01_arrays/_13_MergeIntervals.java",
        "solutionLogic": "",
        "solutionSteps": [],
        "tags": [
            "mergeSort"
        ],
        "credits": "",
        "time_complexity": "",
        "space_complexity": ""
    }
]